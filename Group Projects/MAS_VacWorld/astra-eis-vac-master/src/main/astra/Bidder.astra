
// Bidder ("Decco"): random-move bot that will create a callDistances when dust is found
// Agents send their bids for that dust location (i.e., calculated with distance formula)
// Bidder determines bot with shortest distance and sends back its location to the winner
// Losing agents continue to move randomly, prioritizing dust

agent Bidder {
    module System S;
    module Console C;
    module EIS ei;
    module Debug d;
    module Math M;
    module Random R;

    types actions {
        formula right(string);
        formula left(string);
        formula forward(string);
        formula here(string);
        formula current_loc(int, int);
        formula task(string);
    }

    types auction {
        formula mydistance(int, string);
        formula winner(string, int);
        formula callDistances(int, int);
    }


    initial winner("Decco", 60);
    initial current_loc(0, 0);
    initial mydistance(60, "Decco");

    rule +!main([string name]) {
        ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
		ei.join();
        ei.link(name);
        S.sleep(3000);
        !moveAround();
    }

    rule +!moveAround() {
        int i = 0;
        while (i < 10) {
            S.sleep(500);
            !moveRandom();
            i = i + 1;
        }

        if (~right("dust") & ~left("dust") & ~forward("dust")) {
            ei.move("east", 7);
        }

        int j = 0;
        while (j < 10) {
            S.sleep(500);
            !moveRandom();
            j = j + 1;
        }

        if (~right("dust") & ~left("dust") & ~forward("dust")) {
            ei.move("south", 5);
        }

        int n = 0;
        while (n < 10) {
            S.sleep(500);
            !moveRandom();
            n = n + 1;
        }

        if (~right("dust") & ~left("dust") & ~forward("dust")) {
            ei.move("west", 7);
        }

        int m = 0;
        while (m < 10) {
            S.sleep(500);
            !moveRandom();
            m = m + 1;
        } 
        
        if (~right("dust") & ~left("dust") & ~forward("dust")) {
            ei.move("north", 5);
        }   

        !moveAround();
    }

    // When dust is found, begin the auction to determine the duster that will clean the dust found
    // The bot light is used to indicate when the Bidder has stopped the auction
    goal +!callDistances() {
        body {
            ei.light("on");
            list names = ["Harry", "Henry", "Lloyd"];
            // Send current location to all dusters
            forall(string name : names) {
                while (~task("none")) {
                    S.sleep(500);
                }
                C.println("callDistances started: Dust found!");
                query(current_loc(int a, int b));
                send(inform, name, callDistances(a, b));
                C.println("Message sent: " + a + ", " + b);
            }
            
            C.println("Waiting for bids");
            S.sleep(5000);

            C.println("Evaluating bids");
            // best_bid is the distance dusters must beat (i.e., be lower than), otherwise Decco will clean
            int best_bid = 60;
            string winner = "Decco";
            // Compare all bids sent back to Decco and determine the winner
            foreach(mydistance(int botdistance, string botname)) {
                C.println("Comparing bids");
                !compareBids(current(botname, botdistance), winner(winner, best_bid), boolean better);
                if (better == true) {
                    -winner(winner, best_bid);
                    best_bid = botdistance;
                    winner = botname;
                    +winner(winner, best_bid);
                }
            }

            // Send reject and accept proposals to appropriate dusters
            !winner(winner, best_bid);

            while (~task("none")) {
                S.sleep(500);
            }

            S.sleep(3000);

            if (winner == "Decco") {
                ei.clean();
            }

            while (~task("none")) {
                S.sleep(500);
            }

            !moveAway();
            ei.light("off");
            !moveAround();
        }

        rule @message(propose, string sender, mydistance(int botdistance, string botname)) {
            C.println("Received mydistance: " + botdistance + " from: " + sender);
            +mydistance(botdistance, sender);
        }

        rule +!winner(string winner, int best_bid) {
            C.println("Calculating winner: " + winner);
            foreach(mydistance(int botdistance, string botname)) {
                if (botname ~= winner) {
                    C.println("I'm not a winner " + botname);
                    while (~task("none")) {
                        S.sleep(500);
                    }
                    query(current_loc(int a, int b));
                    send(reject-proposal, botname, callDistances(a, b));
                    -mydistance(botdistance, botname);
                }
                else {
                    C.println("I'm the winner! " + winner);
                    while (~task("none")) {
                        S.sleep(500);
                    }
                    query(current_loc(int a, int b));
                    send(accept-proposal, winner, callDistances(a, b));
                    C.println("Winner: " + winner + " with distance: " + best_bid);
                    -mydistance(best_bid, winner);
                }
            }  
        } 
    }

    rule +!compareBids(current(string botname, int botdistance), 
        winner(string winner, int best_bid), boolean better) {
            C.println(botname + " my distance:" + botdistance + " against " + winner + " best:" + best_bid);
            if (botdistance < best_bid) {
                better = true;
            }
            else {
                better = false;
            }
    }

    // Move away from the dust that was found and sent to the duster agents
    rule +!moveAway() {
        
        if (forward("obstacle") | forward("vac")) {
            ei.move("back", 1);
        }
        double randomDir = R.randomIntDir();

        if (randomDir >= 0 & randomDir <= 25) {
            ei.move("forward");
        }
        if (randomDir >= 26 & randomDir <= 50) {
            ei.move("right");
        }
        if (randomDir >= 51 & randomDir <= 75) {
            ei.move("left");
        }
        // can't move back if * 75 in Random.java
        if (randomDir >= 76 & randomDir <=100) {
            ei.move("back");
        }
    }

    // Prioritize moving towards dust, else move random
    rule +!moveRandom() {

        if (here("dust")) {
            !callDistances();
        }

        if (forward("dust")) {
            ei.move("forward");
        }
        else if(right("dust")) {
            ei.move("right");
        }
        else if(left("dust")) {
            ei.move("left");
        }
        else {

            double randomDir = R.randomIntDir();

            if (randomDir >= 0 & randomDir <= 25) {
                ei.move("forward");
            }
            if (randomDir >= 26 & randomDir <= 50) {
                ei.move("right");
            }
            if (randomDir >= 51 & randomDir <= 75) {
                ei.move("left");
            }
            // can't move back if * 75 in Random.java
            if (randomDir >= 76 & randomDir <=100) {
                ei.move("forward");
            }
        }
    }

    rule +$ei.event(task("move")) {
        -+task("move");
    }

    rule +$ei.event(task("clean")) {
        -+task("clean");
    }

    rule +$ei.event(task("none")) {
        -+task("none");
    }

    rule +$ei.event(task("turn")) {
        -+task("turn");
    }

    rule +$ei.event(location(int x, int y)) : current_loc(int a, int b) {
        -current_loc(a, b);
        +current_loc(x, y);
    }

    rule +$ei.event(square("right", string x)) {
        -+right(x);
    }

    rule +$ei.event(square("left", string x)) {
        -+left(x);
    }

    rule +$ei.event(square("forward", string x)) {
        -+forward(x);
    }

    rule +$ei.event(square("here", string x)) {
        -+here(x);
    }
}